{"version":3,"sources":["component/Service_Provider/OrderActionBySubAdmin.js"],"names":["OrderActionBySubAdmin","axiosClient","defaults","withCredentials","_useState","useState","_useState2","_slicedToArray","order","setOrders","_useState3","_useState4","deliveryPartners","setDeliveryPartner","order_id","useParams","id","useEffect","get","concat","then","res","data","catch","err","console","log","response","error","_useState5","orderstatus","expected_delivery_date","assigndeliverypersion","_useState6","values","setValues","handleInput","event","prev","_objectSpread","_defineProperty","target","name","value","navigate","useNavigate","dateStyle","width","height","fontSize","React","createElement","className","style","display","flexDirection","justifyContent","alignItems","backgroundColor","minWidth","action","onSubmit","preventDefault","post","alert","state","loggedIn","padding","undefined","assign_delivery_persion_id","Fragment","textAlign","fontWeight","htmlFor","required","type","placeholder","onChange","cursor","status","filter","map","length","deliveryPartner","marginLeft","color"],"mappings":"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","file":"static/js/98.e7fba406.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport axiosClient from '../axiosClient';\r\nexport default function OrderActionBySubAdmin() {\r\n    //main for connecting backend with Session\r\n    axiosClient.defaults.withCredentials = true;\r\n    const [order, setOrders] = useState([]);\r\n    const [deliveryPartners, setDeliveryPartner] = useState([]);\r\n    const param = useParams();\r\n    var order_id = param.id;\r\n    useEffect(() => {\r\n        axiosClient.get(`/sub_admin/orders/order/${order_id}`)\r\n            .then(res => {\r\n                if (res.data !== null) {\r\n                    setOrders(res.data[0]);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }, [])\r\n    useEffect(() => {\r\n        axiosClient.get(`/superadmin/delivery_partner`)\r\n            .then(response => {\r\n                // Handle response\r\n                setDeliveryPartner(response.data)\r\n            })\r\n            .catch(err => {\r\n                // Handle errors\r\n                console.error(err);\r\n            });\r\n    }, [])\r\n    // console.log(order)\r\n\r\n    const [values, setValues] = useState({\r\n        order_id: order_id,\r\n        orderstatus: '',\r\n        expected_delivery_date: '',\r\n        assigndeliverypersion: '',\r\n\r\n    })\r\n    const handleInput = (event) => {\r\n        setValues(prev => ({ ...prev, [event.target.name]: [event.target.value] }))\r\n    }\r\n    const navigate = useNavigate();\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        // console.log(values)\r\n        axiosClient.post(`/sub_admin/update/order`, values)\r\n            .then(res => {\r\n                if (res.data === 'success') {\r\n                    alert('Delivery  status updated Successfully!!')\r\n                    navigate('/sub-admin/home', { state: { loggedIn: true } });\r\n                }\r\n                else if (res.data === null) {\r\n                    alert('Error')\r\n                }\r\n                else {\r\n                    alert('Error')\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    const dateStyle = {\r\n        width: \"13.2rem\",\r\n        height: \"2rem\",\r\n        fontSize: \"1.1rem\",\r\n        width: '90%'\r\n    };\r\n    return (\r\n        <div>\r\n            <div className=\"container mt-3\" style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                <h2 className='p-2' style={{ backgroundColor: 'aqua' }}>||Update Order Details||</h2>\r\n                <div className='bg-white m-3 pt-3 pl-2 rounded w-30 shadow' style={{ minWidth: '40vw', height: '110%' }}>\r\n                    <form action='submit' onSubmit={handleSubmit} style={{ padding: '1vw' }}>\r\n                        <h5> <span className='text-info'>Healthhepta</span></h5>\r\n                        <h5> <span className='text-warning'>{order.assign_delivery_persion_id !== undefined ? <>\r\n                            <p>Delivery Person Already Assigned</p>\r\n                        </> : <>\r\n                            <p>Delivery Person Not Assigned</p>\r\n                        </>}</span></h5>\r\n\r\n                        <div className=' p-1' style={{ textAlign: 'initial', fontWeight: '700' }} >\r\n                            <label className='p-1' htmlFor=\"order_id\">Order Id : </label><br></br>\r\n                            <input required className='m-2 p-1' type=\"text\" style={{ width: '90%' }} placeholder='Enter Product Name'\r\n                                name='id' value={order.id} onChange={handleInput} /><br />\r\n                        </div>\r\n                        <div className=' p-1' style={{ textAlign: 'initial', fontWeight: '700' }} >\r\n                            <label className='p-1' htmlFor=\"orderstatus\">Order Status: </label>\r\n                            <br />\r\n                            <select\r\n                                className='m-2 p-1'\r\n                                required\r\n                                onChange={handleInput} name='orderstatus'\r\n                                style={{ width: '90%', cursor: 'pointer' }}>\r\n                                <option value=\"select\">{order.status}</option>\r\n                                <option value=\"accepted\">Accepted</option>\r\n                                <option value=\"completed\">Completed</option>\r\n                            </select><br />\r\n                        </div>\r\n                        <div className=' p-1' style={{ textAlign: 'initial', fontWeight: '700' }} >\r\n                            <label className='p-1' htmlFor=\"expected_delivery_date\">Expected Delivery Date : </label>\r\n                            <input\r\n                                className='m-2 p-1'\r\n                                type=\"date\"\r\n                                required\r\n                                style={dateStyle}\r\n                                name='expected_delivery_date'\r\n                                value={order.expected_delivery_date}\r\n                                placeholder={order.expected_delivery_date}\r\n                                onChange={handleInput}\r\n                            //   onClick={() => updateDeliveryDate(order.id)}\r\n                            /><br />\r\n                        </div>\r\n                        <div className=' p-1' style={{ textAlign: 'initial', fontWeight: '700' }} >\r\n                            <label className='p-1' htmlFor=\"assigndeliverypersion\">Assign Delivery Persion : </label>\r\n                            <select\r\n                                className='m-2 p-1'\r\n                                required\r\n                                onChange={handleInput} name='assigndeliverypersion'\r\n                                style={{ width: '90%', cursor: 'pointer' }}>\r\n                                {order.assign_delivery_persion_id !== undefined ? <>\r\n                                    <option value=\"select\"> {deliveryPartners.filter(deliveryPartners => deliveryPartners.id === order.assign_delivery_persion_id).map(deliveryPartners => (\r\n                                        <li>\r\n                                            {deliveryPartners.name}\r\n                                        </li>\r\n                                    ))}</option>\r\n                                </> : <>\r\n                                    <option value=\"select\">Select</option>\r\n                                </>}\r\n\r\n                                {deliveryPartners.length > 0 &&\r\n\r\n                                    deliveryPartners.map((deliveryPartner) =>\r\n                                        <option value={deliveryPartner.id}>{deliveryPartner.name}</option>\r\n                                    )\r\n\r\n                                }\r\n                            </select><br />\r\n                        </div>\r\n                        <div className=\"form-check \">\r\n                            <input required className=\"form-check-input\" type=\"checkbox\" value=\"check\" id=\"flexCheckChecked\" style={{ marginLeft: '1vw' }} />\r\n                            <label className=\"form-check-label\" htmlFor=\"flexCheckChecked\">\r\n                                <p>You are sure to Assign  <span className='text-warning'>Delivery Boy</span> </p>\r\n                            </label>\r\n                        </div>\r\n                        <button type='submit' className='btn  btn-default border p-2 mb-3 btn-info' style={{ width: '90%', color: 'white', cursor: 'pointer' }}>Submit</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n"],"sourceRoot":""}